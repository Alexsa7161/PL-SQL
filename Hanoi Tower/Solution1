/*
Суть решения:
Решение основано на принципе действия стека. В таблицу вводится дополнительный столбец,
содержащий единственное значение - указатель на вершину стека(индекс array). Такой подход позволяет
не читать весь array каждый раз при обращении к нему и искать нужное значение гораздо быстрее.
таблица состоит из столбцов: индекс стержня, массив диаметров дисков, указатель на вершину массива.
В качестве режима блокировки таблицы подходит любой, способный блокировать сам себя
(ACCESS EXCLUSIVE, EXCLUSIVE, SHARE ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE). 
Блокировка позволяет ставить на ожидание другие транзакции, вызывающие такую же блокировку.
Само решение состоит из 4-х шагов: проверка диаметров дисков(чтобы не переносить больший на меньший),
перенос диска и изменение указателя на стержне, куда отправляется диск,
перенос диска и изменение указателя на стержне, откуда отправляется диск, 
вывод текущего диска по указателю на стержне, куда отправляется диск.
*/
CREATE TABLE disks (
  rod_id smallint primary key, -- создание индекса с помощью primary key для ускорения поиска по значению
  disk_arr smallint[], -- массив дисков
  index smallint -- указатель на вершину массива
);
insert into disks
  select 1, array[64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,
                  37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,
                  13,12,11,10,9,8,7,6,5,4,3,2,1], 64 -- первый стержень заполнен
Union
select generate_series(2,64,1),
       array[null::int],0; -- начальный индекс = 0, т. к. на них нет дисков
create or replace function move(rod_from integer, rod_to integer) RETURNS integer
AS $$
      lock table disks in exclusive mode; -- блокировка, способная блокировать саму себя
      select 1 / case
                    when coalesce((select disk_arr[index] from disks where rod_id = $1),65) <  --coalesce для учёта нулевого индекса
                         coalesce((select disk_arr[index] from disks where rod_id = $2),65) and rod_from between 1 and 64 
                         and rod_to between 1 and 64
                    then 1
                    else 0 -- ошибка если больший диск переносится на меньший, если перенос с одного диска на тот же, если индексы стержней вне допустимых
                 end;
      update disks set disk_arr[index+1] = (select disk_arr[index]
                                            from disks
                                            where rod_id = $1),
                       index = index +1
      where rod_id = $2; --обновляем значение на следующем индексе, обновляем указатель
      update disks set disk_arr[index] = null,
                       index = index -1 
      where rod_id = $1; -- удаляем старый диск, уменьшаем указатель
      select disk_arr[index] 
      from disks 
      where rod_id = $2;  -- выборка текущего диска по указателю
   $$
LANGUAGE SQL;
